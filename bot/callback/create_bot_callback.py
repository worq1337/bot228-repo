import logging
from aiogram import Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.states import BotCreation

logger = logging.getLogger(__name__)

async def create_bot_callback(callback: CallbackQuery, bot: Bot, state: FSMContext, session: AsyncSession) -> None:
    """
    Handle bot creation through callback - starts the token input flow
    """
    try:
        # Answer the callback to stop loading animation
        await callback.answer()
        
        # Set state to waiting for token
        await state.set_state(BotCreation.waiting_for_token)

        # Ask user to provide token
        await callback.message.answer(
            "<b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–µ—Ä–∫–∞–ª–∞ </b><b>@SaveMod_bot</b><b> —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b> üëá \n\n"
            "<blockquote>1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather\n\n"
            "2. –ù–∞–ø–∏—à–∏—Ç–µ /newbot , –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –±–æ—Ç–∞, –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–º.\n\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ @Username –±–æ—Ç–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –∫–æ–Ω—á–∞—Ç—å—Å—è –Ω–∞ ¬´Bot¬ª –ø—Ä–∏–º–µ—Ä: testnetbot\n\n"
            "4. –ù–∞–ø–∏—à–∏—Ç–µ –≤ @BotFather /mybot –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.\n\n"
            "<b>5. –ù–∞–∂–º–∏—Ç–µ ¬´Bot Settings¬ª, –¥–∞–ª–µ–µ ¬´Business Mod¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´Turn on¬ª\n\n"
            "6. ¬´Back to Settings¬ª -> ¬´Back to Bot¬ª -> ¬´API Token¬ª —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞.</b></blockquote>\n\n"
            "<b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ /cancel</b>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.exception(f"Error in create_bot callback: {e}")
        await callback.answer("An error occurred while processing your request", show_alert=True)
